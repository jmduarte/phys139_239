Traceback (most recent call last):
  File "/home/runner/miniconda3/envs/phys139/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/miniconda3/envs/phys139/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/miniconda3/envs/phys139/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/miniconda3/envs/phys139/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/miniconda3/envs/phys139/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/miniconda3/envs/phys139/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/miniconda3/envs/phys139/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/miniconda3/envs/phys139/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from GraphDataset import GraphDataset

local = False

if local:
    file_names = ["/higgs/train/ntuple_merged_10.root"]
    file_names_test = ["/higgs/test/ntuple_merged_0.root"]
else:
    file_names = [
        "root://eospublic.cern.ch//eos/opendata/cms/datascience/HiggsToBBNtupleProducerTool/HiggsToBBNTuple_HiggsToBB_QCD_RunII_13TeV_MC/train/ntuple_merged_10.root"
    ]
    file_names_test = [
        "root://eospublic.cern.ch//eos/opendata/cms/datascience/HiggsToBBNtupleProducerTool/HiggsToBBNTuple_HiggsToBB_QCD_RunII_13TeV_MC/test/ntuple_merged_0.root"
    ]

graph_dataset = GraphDataset(
    "gdata_train", features, labels, spectators, n_events=1000, n_events_merge=1, file_names=file_names
)

test_dataset = GraphDataset(
    "gdata_test", features, labels, spectators, n_events=2000, n_events_merge=1, file_names=file_names_test
)
------------------


[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[3][39m[32m, line 16[39m
[32m      9[39m     file_names = [
[32m     10[39m         [33m"[39m[33mroot://eospublic.cern.ch//eos/opendata/cms/datascience/HiggsToBBNtupleProducerTool/HiggsToBBNTuple_HiggsToBB_QCD_RunII_13TeV_MC/train/ntuple_merged_10.root[39m[33m"[39m
[32m     11[39m     ]
[32m     12[39m     file_names_test = [
[32m     13[39m         [33m"[39m[33mroot://eospublic.cern.ch//eos/opendata/cms/datascience/HiggsToBBNtupleProducerTool/HiggsToBBNTuple_HiggsToBB_QCD_RunII_13TeV_MC/test/ntuple_merged_0.root[39m[33m"[39m
[32m     14[39m     ]
[32m---> [39m[32m16[39m graph_dataset = [43mGraphDataset[49m[43m([49m
[32m     17[39m [43m    [49m[33;43m"[39;49m[33;43mgdata_train[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43mfeatures[49m[43m,[49m[43m [49m[43mlabels[49m[43m,[49m[43m [49m[43mspectators[49m[43m,[49m[43m [49m[43mn_events[49m[43m=[49m[32;43m1000[39;49m[43m,[49m[43m [49m[43mn_events_merge[49m[43m=[49m[32;43m1[39;49m[43m,[49m[43m [49m[43mfile_names[49m[43m=[49m[43mfile_names[49m
[32m     18[39m [43m)[49m
[32m     20[39m test_dataset = GraphDataset(
[32m     21[39m     [33m"[39m[33mgdata_test[39m[33m"[39m, features, labels, spectators, n_events=[32m2000[39m, n_events_merge=[32m1[39m, file_names=file_names_test
[32m     22[39m )

[36mFile [39m[32m~/work/phys139_239/phys139_239/notebooks/GraphDataset.py:44[39m, in [36mGraphDataset.__init__[39m[34m(self, root, features, labels, spectators, transform, pre_transform, n_events, n_events_merge, file_names, remove_unlabeled)[39m
[32m     42[39m [38;5;28mself[39m.file_names = file_names
[32m     43[39m [38;5;28mself[39m.remove_unlabeled = remove_unlabeled
[32m---> [39m[32m44[39m [38;5;28;43msuper[39;49m[43m([49m[43mGraphDataset[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m)[49m[43m.[49m[34;43m__init__[39;49m[43m([49m[43mroot[49m[43m,[49m[43m [49m[43mtransform[49m[43m,[49m[43m [49m[43mpre_transform[49m[43m)[49m

[36mFile [39m[32m~/miniconda3/envs/phys139/lib/python3.11/site-packages/torch_geometric/data/dataset.py:112[39m, in [36mDataset.__init__[39m[34m(self, root, transform, pre_transform, pre_filter, log, force_reload)[39m
[32m    109[39m [38;5;28mself[39m.force_reload = force_reload
[32m    111[39m [38;5;28;01mif[39;00m [38;5;28mself[39m.has_download:
[32m--> [39m[32m112[39m     [38;5;28;43mself[39;49m[43m.[49m[43m_download[49m[43m([49m[43m)[49m
[32m    114[39m [38;5;28;01mif[39;00m [38;5;28mself[39m.has_process:
[32m    115[39m     [38;5;28mself[39m._process()

[36mFile [39m[32m~/miniconda3/envs/phys139/lib/python3.11/site-packages/torch_geometric/data/dataset.py:225[39m, in [36mDataset._download[39m[34m(self)[39m
[32m    224[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_download[39m([38;5;28mself[39m):
[32m--> [39m[32m225[39m     [38;5;28;01mif[39;00m [43mfiles_exist[49m[43m([49m[38;5;28;43mself[39;49m[43m.[49m[43mraw_paths[49m[43m)[49m:  [38;5;66;03m# pragma: no cover[39;00m
[32m    226[39m         [38;5;28;01mreturn[39;00m
[32m    228[39m     fs.makedirs([38;5;28mself[39m.raw_dir, exist_ok=[38;5;28;01mTrue[39;00m)

[36mFile [39m[32m~/miniconda3/envs/phys139/lib/python3.11/site-packages/torch_geometric/data/dataset.py:430[39m, in [36mfiles_exist[39m[34m(files)[39m
[32m    427[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mfiles_exist[39m(files: List[[38;5;28mstr[39m]) -> [38;5;28mbool[39m:
[32m    428[39m     [38;5;66;03m# NOTE: We return `False` in case `files` is empty, leading to a[39;00m
[32m    429[39m     [38;5;66;03m# re-processing of files on every instantiation.[39;00m
[32m--> [39m[32m430[39m     [38;5;28;01mreturn[39;00m [38;5;28mlen[39m(files) != [32m0[39m [38;5;129;01mand[39;00m [38;5;28mall[39m([43m[[49m[43mfs[49m[43m.[49m[43mexists[49m[43m([49m[43mf[49m[43m)[49m[43m [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mf[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mfiles[49m[43m][49m)

[36mFile [39m[32m~/miniconda3/envs/phys139/lib/python3.11/site-packages/torch_geometric/data/dataset.py:430[39m, in [36m<listcomp>[39m[34m(.0)[39m
[32m    427[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mfiles_exist[39m(files: List[[38;5;28mstr[39m]) -> [38;5;28mbool[39m:
[32m    428[39m     [38;5;66;03m# NOTE: We return `False` in case `files` is empty, leading to a[39;00m
[32m    429[39m     [38;5;66;03m# re-processing of files on every instantiation.[39;00m
[32m--> [39m[32m430[39m     [38;5;28;01mreturn[39;00m [38;5;28mlen[39m(files) != [32m0[39m [38;5;129;01mand[39;00m [38;5;28mall[39m([[43mfs[49m[43m.[49m[43mexists[49m[43m([49m[43mf[49m[43m)[49m [38;5;28;01mfor[39;00m f [38;5;129;01min[39;00m files])

[36mFile [39m[32m~/miniconda3/envs/phys139/lib/python3.11/site-packages/torch_geometric/io/fs.py:54[39m, in [36mexists[39m[34m(path)[39m
[32m     53[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mexists[39m(path: [38;5;28mstr[39m) -> [38;5;28mbool[39m:
[32m---> [39m[32m54[39m     [38;5;28;01mreturn[39;00m [43mget_fs[49m[43m([49m[43mpath[49m[43m)[49m.exists(path)

[36mFile [39m[32m~/miniconda3/envs/phys139/lib/python3.11/site-packages/torch_geometric/io/fs.py:44[39m, in [36mget_fs[39m[34m(path)[39m
[32m     18[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mget_fs[39m(path: [38;5;28mstr[39m) -> fsspec.AbstractFileSystem:
[32m     19[39m [38;5;250m    [39m[33mr[39m[33;03m"""Get filesystem backend given a path URI to the resource.[39;00m
[32m     20[39m 
[32m     21[39m [33;03m    Here are some common example paths and dispatch result:[39;00m
[32m   (...)[39m[32m     42[39m [33;03m            :obj:`"gs://home/me/file"`, :obj:`"s3://..."`.[39;00m
[32m     43[39m [33;03m    """[39;00m
[32m---> [39m[32m44[39m     [38;5;28;01mreturn[39;00m [43mfsspec[49m[43m.[49m[43mcore[49m[43m.[49m[43murl_to_fs[49m[43m([49m[43mpath[49m[43m)[49m[[32m0[39m]

[36mFile [39m[32m~/miniconda3/envs/phys139/lib/python3.11/site-packages/fsspec/core.py:403[39m, in [36murl_to_fs[39m[34m(url, **kwargs)[39m
[32m    392[39m known_kwargs = {
[32m    393[39m     [33m"[39m[33mcompression[39m[33m"[39m,
[32m    394[39m     [33m"[39m[33mencoding[39m[33m"[39m,
[32m   (...)[39m[32m    400[39m     [33m"[39m[33mnum[39m[33m"[39m,
[32m    401[39m }
[32m    402[39m kwargs = {k: v [38;5;28;01mfor[39;00m k, v [38;5;129;01min[39;00m kwargs.items() [38;5;28;01mif[39;00m k [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m known_kwargs}
[32m--> [39m[32m403[39m chain = [43m_un_chain[49m[43m([49m[43murl[49m[43m,[49m[43m [49m[43mkwargs[49m[43m)[49m
[32m    404[39m inkwargs = {}
[32m    405[39m [38;5;66;03m# Reverse iterate the chain, creating a nested target_* structure[39;00m

[36mFile [39m[32m~/miniconda3/envs/phys139/lib/python3.11/site-packages/fsspec/core.py:351[39m, in [36m_un_chain[39m[34m(path, kwargs)[39m
[32m    349[39m [38;5;28;01mfor[39;00m bit [38;5;129;01min[39;00m [38;5;28mreversed[39m(bits):
[32m    350[39m     protocol = kwargs.pop([33m"[39m[33mprotocol[39m[33m"[39m, [38;5;28;01mNone[39;00m) [38;5;129;01mor[39;00m split_protocol(bit)[[32m0[39m] [38;5;129;01mor[39;00m [33m"[39m[33mfile[39m[33m"[39m
[32m--> [39m[32m351[39m     [38;5;28mcls[39m = [43mget_filesystem_class[49m[43m([49m[43mprotocol[49m[43m)[49m
[32m    352[39m     extra_kwargs = [38;5;28mcls[39m._get_kwargs_from_urls(bit)
[32m    353[39m     kws = kwargs.pop(protocol, {})

[36mFile [39m[32m~/miniconda3/envs/phys139/lib/python3.11/site-packages/fsspec/registry.py:258[39m, in [36mget_filesystem_class[39m[34m(protocol)[39m
[32m    256[39m [38;5;28;01mif[39;00m protocol [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m registry:
[32m    257[39m     [38;5;28;01mif[39;00m protocol [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m known_implementations:
[32m--> [39m[32m258[39m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([33mf[39m[33m"[39m[33mProtocol not known: [39m[38;5;132;01m{[39;00mprotocol[38;5;132;01m}[39;00m[33m"[39m)
[32m    259[39m     bit = known_implementations[protocol]
[32m    260[39m     [38;5;28;01mtry[39;00m:

[31mValueError[39m: Protocol not known: gdata_train/raw/root

